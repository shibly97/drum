{"version":3,"sources":["sounds/sound6.mp3","sounds/sound1.mp3","sounds/sound2.wav","sounds/sound3.mp3","sounds/sound4.wav","sounds/sound5.wav","App.js","serviceWorker.js","index.js"],"names":["module","exports","data","src","s1","s2","s3","s4","s5","s6","DrumPad","handlekeydown","e","keyCode","props","babe","charCodeAt","status","sound","play","volume","click","name","document","addEventListener","this","id","className","onClick","audio","currentTime","ref","React","Component","App","setStatus","event","setState","state","console","log","setVolume","parseFloat","target","value","setHead","head","map","el","dell","UIfx","keycode","scr","type","min","max","step","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47e10791.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sound6.5524e136.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound1.b006df96.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound2.dd3f5bd3.wav\";","module.exports = __webpack_public_path__ + \"static/media/sound3.cadf401c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound4.dd477149.wav\";","module.exports = __webpack_public_path__ + \"static/media/sound5.f81f8558.wav\";","import React from 'react';\nimport './App.css';\nimport UIfx from 'uifx';\nimport s1 from './sounds/sound1.mp3';\nimport s2 from './sounds/sound2.wav';\nimport s3 from './sounds/sound3.mp3';\nimport s4 from './sounds/sound4.wav';\nimport s5 from './sounds/sound5.wav';\nimport s6 from './sounds/sound6.mp3';\n\nconst data = [{\"id\" : 'aa', \"name\" : \"Q\", 'keycode': \"Q\" , src : s1},\n              {\"id\" : 'bb', \"name\" : \"W\", 'keycode': \"W\" , src : s2},\n              {\"id\" : 'cc', \"name\" : \"E\", 'keycode': \"E\" , src : s3},\n              {\"id\" : 'dd', \"name\" : \"A\", 'keycode': \"A\" , src : s4},\n              {\"id\" : 'ee', \"name\" : \"S\", 'keycode': \"S\" , src : s5},\n              {\"id\" : 'ff', \"name\" : \"D\", 'keycode': \"D\" , src : s6},\n              {\"id\" : 'gg', \"name\" : \"Z\", 'keycode': \"Z\" , src : s6},\n              {\"id\" : 'hh', \"name\" : \"X\", 'keycode': \"X\" , src : s6},\n              {\"id\" : 'ii', \"name\" : \"C\", 'keycode': \"C\" , src : s6}]\n\nclass DrumPad extends React.Component{\n\n  componentDidMount(){\n    document.addEventListener('keydown',this.handlekeydown)\n  }\n\n  handlekeydown = (e) =>{\n    // var aa= \"abcs\"\n    if(e.keyCode === this.props.babe.charCodeAt(0)){\n      if(this.props.status === true){\n        (this.props.sound.play(this.props.volume))}\n      this.props.click(this.props.name)\n    }\n  }\n  render(){\n    return(\n\n      <div id={this.props.name} className = \"drum-pad \" onClick = {() => {\n        if(this.props.status === true){\n        (this.props.sound.play(this.props.volume))\n        this.audio.play()\n        this.audio.currentTime = 0\n        }\n\n        (this.props.click(this.props.name))\n        }}>\n\n        <audio \n        src= \"{this.props.src}\" \n        className=\"clip\" \n        id= {this.props.name} \n        ref={ref=> this.audio = ref} >\n\n        </audio>\n    \n      <p id=\"name\" >{this.props.name}</p>\n      \n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      status : true,\n      volume : 1,\n      head : \"Press a button\"\n    } \n  }\n\n  setStatus =(event) => {\n    this.setState({status : !this.state.status})\n    console.log(this.state.status)\n  }\n\n  setVolume = (event) =>{\n    this.setState({volume : parseFloat(event.target.value)})\n  }\n\n  setHead = (event) =>{\n    this.setState({head : event})\n  }\n\n  render(){\n    return(\n      <div id=\"drum-machine \" className= \"container-fluid text-center\">\n\n        <h1 id=\"display \" className=\"alert alert-success\">{this.state.head}</h1>\n\n        <div className=\"pad\">\n\n        {data.map(el =>{\n          const dell = new UIfx(el.src)\n          return (<DrumPad id={el.id}\n                    name={el.name} sound={dell} status={this.state.status}\n                    volume = {this.state.volume} click={this.setHead} value={el.name} babe={el.keycode}\n                    scr= {el.src}\n                    />)\n        })}\n        </div>\n\n       \n\n        <input  type=\"checkbox\" onClick={this.setStatus} ></input>\n        <label>Sound off</label><br/>\n        <input  type=\"range\" min = '0.0' max='1.0' step='0.1' onChange={this.setVolume}></input>\n        <label>Volume</label>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}